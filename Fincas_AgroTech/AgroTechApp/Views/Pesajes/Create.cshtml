@model AgroTechApp.Models.DB.Pesaje

@{
    ViewData["Title"] = "Registrar Nuevo Pesaje";
    var primaryColor = "#2E8B57";
    var secondaryColor = "#F4A460";
    var lightColor = "#f8f9fa";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - AgroTech</title>
    <style>
        :root {
            --primary: @primaryColor;
            --secondary: @secondaryColor;
            --light: @lightColor;
            --dark: #333;
            --success: #28a745;
            --danger: #dc3545;
        }

        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .create-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .create-header {
            background: linear-gradient(135deg, var(--primary), #3CB371);
            color: white;
            padding: 2rem;
            text-align: center;
        }

            .create-header h1 {
                margin: 0;
                font-size: 2.2rem;
                font-weight: 600;
            }

            .create-header p {
                margin: 0.5rem 0 0;
                opacity: 0.9;
                font-size: 1.1rem;
            }

        .create-body {
            padding: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .form-section {
            background: var(--light);
            padding: 1.5rem;
            border-radius: 10px;
            border-left: 4px solid var(--primary);
        }

            .form-section h3 {
                color: var(--primary);
                margin-top: 0;
                margin-bottom: 1rem;
                font-size: 1.2rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

        .form-group {
            margin-bottom: 1.2rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--dark);
            font-size: 0.95rem;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background-color: white;
        }

            .form-control:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(46, 139, 87, 0.1);
            }

            .form-control.select {
                background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
                background-position: right 0.5rem center;
                background-repeat: no-repeat;
                background-size: 1.5em 1.5em;
                padding-right: 2.5rem;
                -webkit-appearance: none;
                -moz-appearance: none;
                appearance: none;
            }

        .text-danger {
            color: var(--danger);
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: block;
        }

        .btn-group {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            flex-wrap: wrap;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e1e5e9;
        }

        .btn {
            padding: 0.75rem 2rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            text-decoration: none;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

            .btn-primary:hover {
                background-color: #26734d;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(46, 139, 87, 0.3);
            }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                transform: translateY(-2px);
            }

        .icon {
            font-size: 1.2rem;
        }

        .pesaje-illustration {
            text-align: center;
            margin: 1rem 0 2rem;
        }

        .pesaje-icon {
            font-size: 4rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .weight-input-container {
            position: relative;
        }

        .weight-unit {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-weight: 600;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            body {
                padding: 10px;
            }

            .create-header {
                padding: 1.5rem;
            }

                .create-header h1 {
                    font-size: 1.8rem;
                }

            .create-body {
                padding: 1.5rem;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .btn-group {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }

        @@media (max-width: 480px) {
            .create-header h1 {
                font-size: 1.5rem;
            }

            .create-body {
                padding: 1rem;
            }

            .form-section {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="create-container">
        <div class="create-header">
            <h1>⚖️ Registrar Nuevo Pesaje</h1>
            <p>Registre el peso del animal en el sistema</p>
        </div>

        <div class="create-body">
            <div class="pesaje-illustration">
                <div class="pesaje-icon">⚖️</div>
            </div>

            <form asp-action="Create" id="pesajeForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-grid">
                    <!-- Información del Animal -->
                    <div class="form-section">
                        <h3>🐄 Información del Animal</h3>

                        <div class="form-group">
                            <label asp-for="AnimalId" class="form-label">🐮 Animal</label>
                            <select asp-for="AnimalId" class="form-control select" asp-items="ViewBag.AnimalId" id="animalSelect">
                                <option value="">-- Seleccionar Animal --</option>
                            </select>
                            <span asp-validation-for="AnimalId" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label class="form-label">📊 Último Pesaje</label>
                            <div id="ultimoPesajeInfo" class="form-control" style="background-color: #f8f9fa; color: #6c757d; font-style: italic;">
                                Seleccione un animal para ver su último peso registrado
                            </div>
                        </div>
                    </div>

                    <!-- Datos del Pesaje -->
                    <div class="form-section">
                        <h3>📋 Datos del Pesaje</h3>

                        <div class="form-group">
                            <label asp-for="Fecha" class="form-label">📅 Fecha de Pesaje</label>
                            <input asp-for="Fecha" type="datetime-local" class="form-control"
                                   value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                            <span asp-validation-for="Fecha" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="PesoKg" class="form-label">⚖️ Peso del Animal</label>
                            <div class="weight-input-container">
                                <input asp-for="PesoKg" type="number" class="form-control"
                                       step="0.01" min="0" placeholder="Ingrese el peso en kilogramos"
                                       id="pesoInput" />
                                <span class="weight-unit">kg</span>
                            </div>
                            <span asp-validation-for="PesoKg" class="text-danger"></span>
                            <small class="text-muted" style="display: block; margin-top: 0.25rem;">
                                Ejemplo: 450.5 (para 450 kilogramos y 500 gramos)
                            </small>
                        </div>
                    </div>

                    <!-- Observaciones -->
                    <div class="form-section" style="grid-column: 1 / -1;">
                        <h3>📝 Observaciones</h3>

                        <div class="form-group">
                            <label asp-for="Observacion" class="form-label">💬 Observaciones Adicionales</label>
                            <textarea asp-for="Observacion" class="form-control" rows="4"
                                      placeholder="Ingrese observaciones relevantes sobre el pesaje, condición del animal, etc..."></textarea>
                            <span asp-validation-for="Observacion" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div class="btn-group">
                    <a asp-action="Index" class="btn btn-secondary">
                        <span class="icon">←</span> Volver al Listado
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <span class="icon">💾</span> Registrar Pesaje
                    </button>
                </div>
            </form>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="text-danger" style="margin-top: 1rem; padding: 1rem; background-color: #f8d7da; border-radius: 8px;">
                    <strong>Errores de validación:</strong>
                    <ul style="margin: 0.5rem 0 0 1rem;">
                        @foreach (var modelState in ViewData.ModelState)
                        {
                            foreach (var error in modelState.Value.Errors)
                            {
                                <li><strong>@modelState.Key</strong>: @error.ErrorMessage</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Elementos del DOM
                const animalSelect = document.getElementById('animalSelect');
                const ultimoPesajeInfo = document.getElementById('ultimoPesajeInfo');
                const fechaPesaje = document.getElementById('Fecha');
                const pesoInput = document.getElementById('pesoInput');
                const form = document.getElementById('pesajeForm');

                // Establecer fecha y hora actual como valor por defecto
                const now = new Date();
                now.setMinutes(now.getMinutes() - now.getTimezoneOffset());
                if (fechaPesaje && !fechaPesaje.value) {
                    fechaPesaje.value = now.toISOString().slice(0, 16);
                }

                // Validación de fecha (no puede ser futura)
                if (fechaPesaje) {
                    fechaPesaje.addEventListener('change', function() {
                        const fechaSeleccionada = new Date(this.value);
                        const fechaActual = new Date();

                        if (fechaSeleccionada > fechaActual) {
                            alert('La fecha y hora del pesaje no pueden ser futuras');
                            this.value = now.toISOString().slice(0, 16);
                        }
                    });
                }

                // Simulación de carga del último pesaje (en una aplicación real, esto haría una llamada AJAX)
                if (animalSelect) {
                    animalSelect.addEventListener('change', function() {
                        const animalId = this.value;

                        if (animalId) {
                            // Simular carga de datos del animal
                            ultimoPesajeInfo.innerHTML = '<span style="color: var(--primary);">🔄 Cargando información del animal...</span>';

                            // Simular delay de red
                            setTimeout(() => {
                                // En una aplicación real, aquí harías una llamada AJAX al servidor
                                const pesosEjemplo = {
                                    '1': 'Último peso: 420.5 kg (registrado el 15/11/2023)',
                                    '2': 'Último peso: 380.2 kg (registrado el 10/11/2023)',
                                    '3': 'Último peso: 510.8 kg (registrado el 12/11/2023)',
                                    '4': 'Sin historial de pesajes anteriores'
                                };

                                const info = pesosEjemplo[animalId] || 'Sin historial de pesajes anteriores';
                                ultimoPesajeInfo.innerHTML = `<span style="color: var(--primary);">📊 ${info}</span>`;

                                // Sugerir peso basado en el último registro (ejemplo)
                                if (animalId in pesosEjemplo && !pesosEjemplo[animalId].includes('Sin historial')) {
                                    const ultimoPeso = pesosEjemplo[animalId].match(/(\d+\.\d+)/);
                                    if (ultimoPeso) {
                                        pesoInput.placeholder = `Último peso: ${ultimoPeso[0]} kg`;
                                    }
                                }
                            }, 800);
                        } else {
                            ultimoPesajeInfo.innerHTML = 'Seleccione un animal para ver su último peso registrado';
                            pesoInput.placeholder = 'Ingrese el peso en kilogramos';
                        }
                    });
                }

                // Validación en tiempo real del peso
                if (pesoInput) {
                    pesoInput.addEventListener('input', function() {
                        const peso = parseFloat(this.value);

                        if (peso <= 0) {
                            this.style.borderColor = 'var(--danger)';
                        } else if (peso > 2000) {
                            this.style.borderColor = 'var(--danger)';
                            this.title = 'El peso parece ser demasiado alto. Por favor verifique.';
                        } else {
                            this.style.borderColor = '';
                            this.title = '';
                        }
                    });
                }

                // Mejorar experiencia de focus
                const inputs = document.querySelectorAll('.form-control');
                inputs.forEach(input => {
                    input.addEventListener('focus', function() {
                        this.parentElement.classList.add('focused');
                    });

                    input.addEventListener('blur', function() {
                        this.parentElement.classList.remove('focused');
                    });
                });

                // Validación antes del envío
                form.addEventListener('submit', function(e) {
                    const animalId = animalSelect.value;
                    const peso = pesoInput.value;
                    const fecha = fechaPesaje.value;

                    let isValid = true;
                    let errorMessage = '';

                    if (!animalId) {
                        isValid = false;
                        errorMessage += '• Debe seleccionar un animal\n';
                        animalSelect.style.borderColor = 'var(--danger)';
                    }

                    if (!peso || parseFloat(peso) <= 0) {
                        isValid = false;
                        errorMessage += '• El peso debe ser mayor a 0\n';
                        pesoInput.style.borderColor = 'var(--danger)';
                    }

                    if (!fecha) {
                        isValid = false;
                        errorMessage += '• La fecha es requerida\n';
                        fechaPesaje.style.borderColor = 'var(--danger)';
                    }

                    if (!isValid) {
                        e.preventDefault();
                        alert('Por favor corrija los siguientes errores:\n\n' + errorMessage);
                    }
                });
            });
        </script>
    }
</body>
</html>